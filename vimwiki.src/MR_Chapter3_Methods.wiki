%title Chapter 3 Methods
 = Methods =
# 动态调用方法 *send* / *public_send* - 可以在运行时动态的决定调用哪一个方法. *send* 可以call私有方法,*public_send* 只能call公开方法.
  {{{ruby
  # The following two lines are equivalent, however,
  # the 2nd line function call paramenter can be construted dynamically.
  "MyName".to_sym
  "MyName".send(:to_sym)
  }}}
# 动态定义方法: *Module#define_method()* 可以在运行时决定方法的名字
 {{{ruby
  class Person
    def initialize(name)
      @name = name
    end
    # evaluated in the class scope. class.superclass => Module
    # so, we can call the define_method directly.
    define_method :gender do
      "Male"
    end
    def add_method(name,&block)
      # this method is evaluted in the object(self) context.
      # since the :define_method is a Module private method
      # we've to use .send to call it.
      # &block is evaluated using instance_eval
      self.class.send(:define_method,name,&block)
    end
  end
  
  obj = Person.new("Alan")
  obj.add_method :sayhi do
    "hello #{@name}"
  end
  Module.private_instance_methods.include? :define_method # True
  obj.gender # Male
  obj.sayhi # hello Alan
 }}}
# 当对象方法不存在时,会呼叫 *method_missing*;实现该方法可以实现自己想要的行为. 称为幽灵方法(Ghost Methods).
  respond_to_missing? 方法也应该被重新定义，以支持方法存在性的查询。
 {{{ruby
  class Lawyer
    def method_missing(method,*args)
      puts "your called #{method} (#{args.join(', ')})"
      puts "you also pass a block" if block_given?
      represent.send(method,*args)
    end
    def respond_to_missing?(method,include_private=false)
      #Teacher.new.respond_to? method
      Teacher.instance_methods.include? method || super
    end
    def represent
      return Teacher.new
    end
  end
  class Teacher
    def say(*args)
      puts "I'm a lawyer reprentative: #{args.join(', ')}"
    end
  end
  bob = Lawyer.new
  bob.say("hi") do
    # this block is not parsed for syntax before it is actually executed.
    I love you
  end
  bob.respond_to?(:say) # True
 }}}
# 当引用一个不存在的常量时，Ruby会把常量名传递给 *const_missing* 方法.
# 删除方法：Module#remove_method(删除自己), Module#undef_method(删除所有)
# 原则：能使用动态方法时，就不要使用幽灵方法；后者难于DEBUG.
