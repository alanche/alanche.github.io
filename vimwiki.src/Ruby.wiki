 = RubyTips =
# 常数,类名以大写字母开头.
# 文档惯例:
 * 用#引导实例方法,如:Thread#alive,String#to_sym
 * 用::引导类方法,如:Thread::curent
# ruby 对象的属性无法直接访问，都需要通过方法进行访问,可以定义 *attr_accessor*  *attr_reader* *attr_writer*
  来快捷定义属性的访问方法。
# Query the instance methods defined a in specific class Foo?
 * `Foo.instance_methods(false)` : *false* is instruct to ignore the inherited methods.
 * you can use the *Array#grep* methods to further select the result: e.g. `String.instance_methods.grep /^re/`
# list the class Array methods?
 * `[].methods.grep /^re/`
# `Module.contants` Return all the top level constants.
{{{ruby
Module.contants.include? :Object # True
Module.contants.include? :Module # True
}}}
# *Module#contants* return the contants defined in current scope
{{{ruby
module M
  Y = "A contant"
  class C
  end
end
M.constaints # [:C,:Y]
}}}
# instance methods and class methods are different
{{{ruby
String.instance_methods == "abc".methods # True
String.methods == "abc".methods # False
}}}
# The Module#=== is for type testing
{{{ruby
String === "hello" # true
case "hello"
when String
 puts "matched" # matched.
end
}}}
# The *extend* and *include* behavior:
 * *extend Base*: import the Base.instance_methods into *#methods*
 * *include Base*: import the Base.instace_methods as *#instance_methods*
 {{{ruby
 module Base
   # in the current Base scope
   # define the method on current class.
   def self.info
   end
   # define the method on current class's instance.
   def message()
   end
   info # call the Info method
 end
 Base.methods.include? :info # true
 class Demo
   extend Base # omitted self. , import Base.instance_methods into Demo.methods
 end
 Demo.methods.include? :info # false
 Demo.methods.include? :message # true
 Demo.instance_methods.include? :message # false
 class Info
   include Base # import the Base.instace_methods into Info.instance_methods
 end
 Info.methods.include? :info # false
 Info.methods.include? :message # false
 Info.instance_methods.include? :message # true
 }}}
# turn the instance methods into class methods
  {{{ruby
  module Base
    self.extend self # OR extend self
    # defaultly, it is a instance methods
    def list
    end
  end
  Base.methods.include? :list # true
  Base.instance_methods.include? :list # true
  }}}
# ruby-debug is a debugger for ruby program: `require "ruby-debug";` or `require "debug";`
# super不带括号表示调用父类的 *同名函数*,并将本函数的所有参数传入父类的同名函数;
# super()带括号则表示调用父类的 *同名函数*,但是不传入任何参数;
  {{{ruby
  class SParent  
    def initialize *args
      args.each {|arg| puts arg}  
    end  
  end  
     
  class SChild < SParent  
    def initialize a, b, c  
      super  
    end  
  end  
     
  a, b, c = *%W[a b c]   # create the array and upack it.
  SChild.new a, b, c # puts a, b, c if super  
  SChild.new a, b, c # puts nothing if super()
  }}}
# Debug Tips
 * query the object methods: *obj#methods*
 * using the *caller* to show the stacks.
 * using `require debug` to enable the debug prompt.
 * The *Proc#source_location* show the block defintion.
 * using *defined?* to check the varaible/method exists or not.
