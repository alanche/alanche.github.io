%title  Effective Ruby: 48 Specific Ways to Write Better Ruby
# 在Ruby中,除了false和nil,其它值都是真值.`true`,`false` 不是关键字,只是一个普通的常量. 
  {{{ruby
    if 0 then puts "will be printed" end # 0 is recognized as true
    if 0.nil? then puts "will not be printed" end
    true.class # TrueClass
    false.class # FalseClass
  }}}
# 所有对象的值都有可能为nil:可以通过`nil?`对接收者进行断言.推荐将变量显示转换为期望的类型后,再进行方法调用.
  {{{ruby
    person.save unless person.nil?
    title.to_s.capitalize # call .capitalize after it is converted to String by .to_s
    [1,2,nil].compact # [1,2] Array#compact return the copy w/o nil.
  }}}
# 避免使用古怪的Perl语法: 推荐使用String#match代替=~ .避免使用隐式全局变量$_.
# 请冻结常量防止其被改变.如果常量引用了集合对象:数组或散列,需要冻结集合及元素.冻结常量定义的模块防止其被重新赋值.
  {{{ruby
    module Defaults
      NETWORKS = ["192.168.1","192.168.2"].map!(&:freeze).freeze
      # first freeze let array element be freezed. second freeze let array be freezed.
    end
    Defaults.freeze # let NETWORKS can't be changed to point to another object.
  }}}
# 启用ruby的编译时警告: 设置环境变量`RUBYOPT`或者命令行参数包含:*-w*;控制运行时警告:设定$VERBOSE为true/false/nil.
# 对象模型:
  * 对象是实例变量的容器,通过obj#class与其类联系.方法位于类上,称为类的实例方法.
  * 类是方法和常量的容器.类也是对象,其变量称为:类变量,类方法.
  * 模块与类基本相同只是无法实例化.(无#new函数).
  * 单例类(sigleton class) 只服务一个对象.隐藏不可见.通过#singleton_class访问.单例方法位于单例类单例类(sigleton class)
    只服务一个对象.隐藏不可见.通过#singleton_class访问.单例方法位于单例类上.
  * 可以用Object#singleton_class, Class#ancestors, included_modules 返回搜索树.
# 创建子类时,默认不会调用父类的initialize函数,需要显示的调用父类的初始化函数: super 进行初始化.
# 当两者为同一个对象时,`equal?` 返回为true. `==` 值相等时为true.`eql?` 不同类型有不同的重载. 对于数值对象需要同类型同值.
