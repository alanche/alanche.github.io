 = SystemVerilog Minutes =
* 4 state(0/1/x/z) type includes: *logic,reg,integer,time*. others are 2 state types.
* the default enumerated type is an *int*, and started with 0, it can be assigned to int,integer. reverserly, require explict type
  conversion.
  {{{systemverilog
    typedef enum {RED, BLUE, GREEN} COLOR_E;
    COLOR_E color, c2; // initialized as 0, that is, RED.
    integer c;
    initial begin
      c = color;            // Convert from enum to integer
      c++;                  // Increment integer
      if (!$cast(color, c)) // Cast integer back to enum
        $display("Cast failed for c=%0d", c);
      $display("Color is %0d / %0s", color, color.name);
      c2 = COLOR_E'(c);     // No type checking done
    end
    typedef enum {FIRST=1, SECOND, THIRD} ordinal_e;
    // should fixed as: typedef enum {ERR=0,FIRST=1, SECOND, THIRD} ordinal_e;
    ordinal_e position; // buggy: try to assign position as 0.
  }}}
* iterate on multiple dimention array
  {{{systemverilog
    int md[2][3] = '{'{0,1,2},'{3,4,5}}; // multiple dimention array
    bit [31:0] src[5],dst[1:5]; // unpacked array
    initial begin
      foreach(md[i,j]) $display("md[i][j] = %x ",i,j,md[i][j]);
      for(int i=0;i<$size(md);i++) begin
        for (int j=0;j<$size(md[i]);j++) begin
          $display("md[i][j] = %x ",i,j,md[i][j]);
        end
    end
  }}}
* arrays can be compared (equal, nonequal) and assignment 
  {{{systemverilog
    initial begin
      bit [31:0] src[5] = '{0,1,2,3,4},
                 dst[5] = '{5,4,2,3,4};
      $display("src %s dst", (src == dst) ? "==" : "!=");// aggregate comparing. 
      dst = src;// assignment is done when src and dst have same size and type, each element is copied correspondingly.
    end
  }}}
* array methods: reduction(sum,product,xor), allocator
  {{{systemverilog
    int ar[4] = '{1,2,3,3};
    int rs[$]; // allocator returns Queue.
    ar.sum; // 9
    ar.product; // 18;
    rs = ar.find with (item > 1); // {2,3}
    rs = ar.min; // {1}
    rs = ar.max; // {3}
    rs = ar.unique; // {1,2,3}
    rs = ar.find_index with (item > 2); // {2,3}
    rs = ar.find_first_index with (item == 3); // {2}
    c  = ar.sum with (item == 3); // 2 : {3,3} sum adding up the times of expression is true.
  }}}
* function/task call argument handling:
  * input/inout was copied to local variable at the start of routine.
  * output/inout was copied when the routine exited.
  * function call is pass by value defaultly. pass by reference is specified by *ref*:
   {{{systemverilog
     // pass by value: total array is copied to the function stack. expensive operation.
     // pass by reference: the variable's address/handle is passed, so, routine can modify it.
     // best practice: Always use ref when passing arrays to a routine. const protect array be modified.
     function void print_sum (const ref int a[]);
       int sum = 0;
       foreach (a[i]) sum += a[i];
       $display("The sum of the arrays is ", sum);
     endfunction
   }}}
* *static* variable defined in *class* scope shared among all instances, known as class variables. static methods has no access
  to nonstatic members, can access static member and static methods.
  {{{systemverilog
    class MyStatic;
      static int serial_number; // shared among all instances, known as class variable.
      static string className = "MyStatic"; // class variable initialized in declaration.
      extern function new(); // constructor, no return type, body is external defined. 
      task initialize(int val);
        serial_number = val;
      endtask
      task static foo(); endtask     // nonstatic class method with static    variable lifetime.
      static function int next_id(); //    static class method with automatic variable lifetime
        next_id = ++serial_number; // ok to access static variable.
      endfunction
    endclass
    function MyStatic::new(); /* declare out of class definition */ endfunction
    MyStatic p;
    p.initialize(); // p is null, but ok to call task access static variable only.
  }}}
* *typedef class* resolve the compile order issues
  {{{systemverilog
    typedef class C2; // class can be omitted.
    // typedef C2;    // this still works.
    class C1;
      C2 c; // recognize C2 as a type to avoid compiler error.
    endclass
    class C2; // C2 is re-enforced as a type by class definition.
      C1 c;
    endclass
  }}}
* modifying handle in a task require *ref* modifier.
  {{{systemverilog
    class BusTrans; int addr; endclass
    task create_packet(ref BusTrans lb); // ref is must. it designate the lb is a reference(alias) of b.
      lb = new(); // modify the handle
    endtask
    // ref is not required,since we only modify the object not the handle.
    // object(and array) is passed by handle as a reference defaulty.
    task modify_packet(BusTrans lb); 
      lb.addr = $random; // modify the object refered by the handle.
    endtask
    BusTrans b[10]; // array of object handle.
    foreach (b[i]) begin
      create_packet(b[i]); // pass as reference of handle.
      modify_packet(b[i]); // pass by value (of handle/pointer) / ref of object.
      $display("packet address = %x",b[i].addr);
    end
  }}}
* *new obj* only do shallow copy, object contains object need deep copy.
  {{{systemverilog
    class Field;
      int value;
      function new(int v);
        this.value = v;
      endfunction
    endclass
    class BusTrans;
      Field id;
      function new(string name="noname",int id);
        this.id = new(id);
        this.name = name;
      endfunction
      function BusTrans copy; // customized copy function, reenforce the constructor calling.
        copy = new(this.name,this.id.value);
      endfunction
    endclass
    src = new("first",1);
    dst = new src; // dst.id == src.id, refer to same Field object.
    // only do shallow copy. it does not do call the constructor new to build the object,
    // the src object value just is copied lieterally: handle rather than object is copied.
    dst = src.copy; // deep copy.
  }}}
* weighted distribution of random in constraints
  {{{systemverilog
    rand int src,dst;
    rand int b,c,d;
    int forty = 40,sixty = 60; // dist range can be variable.
    constraint c {
      b < d; c == b; d < 30; c > 25; // b,c,d can only be 26 ~ 29.
      src dist { 0 := forty,[1:3] := sixty }; // the weight is the same for every specified value in the range
      dst dist { 0 /= 40,[1:3] /= 60 }; // the weight is to be equally divided between all the values
      // value    : possibility
      // src = 0 : 40/(40 + 60 * 3) = 40 /220
      // src = 1,2,3 : 60/(40 + 60 * 3) = 60 /220
      // dst = 0 : 40/100
      // dst = 1,2,3 : 20/(40 + 60) = 20/100
    }
  }}}
* constraints implication is bidirectional: 2 expression is determinted together.
  {{{systemverilog
    class impl;
      rand bit x; // 0,1
      rand bit [1:0] y; // 0,1,2,3
      constraint c {
        y > 0; // y is forced to non-zero value.
        x == 0 -> y == 0; // -> : x = 0 requires y is 0. as bidirectional: x is forced to non-zero value too.
      }
    endclass
    // solution  X   Y   Probability
    //   0       0   0    
    //   1       0   1    
    //   2       0   2    
    //   3       0   3    
    //   4       1   0    
    //   5       1   1    1/3 // only these solution santisfy constraint.
    //   6       1   2    1/3 // only these solution santisfy constraint.
    //   7       1   3    1/3 // only these solution santisfy constraint.
  }}}
* guiding distribution with *solve .. before* statement.
  {{{systemverilog
    class impl;
      rand bit x; // 0,1
      rand bit [1:0] y; // 0,1,2,3
      constraint c_xy {
        x == 0 -> y == 0;
        solve x before y; // firstly, randomize 'x' equality among its possible values: 0,1
        // solve y before x; // firstly, randomize 'y' equality among its possible values: 0,1,2,3
      }
    endclass
    // when solve x before y; firstly equaly randomize 'x' among its possible value.
    // solution  x   y   probability
    //   0       0   0   1/2
    //   1       0   1   0
    //   2       0   2   0  
    //   3       0   3   0
    //   4       1   0   1/2 * 1/4 = 1/8 
    //   5       1   1   1/2 * 1/4 = 1/8
    //   6       1   2   1/2 * 1/4 = 1/8
    //   7       1   3   1/2 * 1/4 = 1/8

    // solve y before x;
    // solution  x   y   probability
    //   0       0   0  1/4 * 1/2 ( 2 possibles x selection)
    //   1       0   1  not satisfied.
    //   2       0   2  not satisfied.
    //   3       0   3  not satisfied.
    //   4       1   0  1/4 * 1/2( 2 possible x ) = 1/8 
    //   5       1   1  1/4 
    //   6       1   2  1/4 
    //   7       1   3  1/4 
  }}}
* *handle.randomize(null)* not do randomization,just ensure all constraint are santisfied.
* *rand_mode* control whether a random variable is active or inactive (as *rand* is not specified).`obj[.var.].rand_mode(0/1)`.
* `$urandom` is similar with `$random` with 2 exceptions: *thread stable* and unsigned number. every object and seed has it's own
  PRNG.
* should use *automatic* variables to hold values in concurrent threads. example:
  {{{systemverilog
    for (int i=0;i<3;i++) begin
      fork // schedule thread, not executed.
        // notes: without the following statement, the loop variable is overwritten by later iteration.
        automatic int j = i; // save into automatic variable. 
        $write(j);
      join_none
    end
    #0; // block current thread,reschedule the following statement in the later of current slot,
    // then execute the above scheduled thread.
    $display;
    // with automatic outputs: 1 2 3 ;
    // without automatic statement, outputs: 3 3 3
  }}}
* *mailbox* store the *handle of an object rather than the object itself*:
  {{{systemverilog
    mailbox#(BusTrans) mb = new;
    mailbox#(Bus) mc = new;
    BusTrans b;
    Bus c;
    c = new; // buggy version.
    repeat(10) begin
      b = new; // should allocate new object, w
      assert(tr.randomize()); assert(c.randomize());
      mb.put(b); // there are 10 distinct copies of handle point to 10 object.
      mc.put(c);  // there are 10 copies of same handle point to same object.
    end
  }}}
* A thread continue to run until there is a blocking statement e.g. #0, wait, @event and etc.
* SystemVerilog always based on the handle's type to call it's *new* (constructor). 
* the extended class *must* call the base class's constructor as *the first executable line* of it's constructor if base class has
  constructor with argument. Thus, all the constructors are called, in the proper order, beginning with the rootbase class and
  ending with the current class.
* *covergroup* can be defined in class,program,module level, it can sample variable in the scope where it is defined,e.g:
  program/module variables, signals from an interface, or any signal in the design (using a hierarchical reference),variables in
  class, as well as data values from embedded classes.
* `embedded covergroup`: is defined within a class and no explicit variables of that covergroup are declared in the class, then a
  variable with the same name as the coveragegroup is implicitly declared.
  {{{systemverilog
    class xyz;
      bit [3:0] m_x; int m_y; bit m_z;
      covergroup cov1 @m_z; // embedded covergroup , trigged when m_z is toggled.
        coverpoint m_x;
	coverpoint m_y;
      endgroup
      // implicit written as: cov1 cov1;
      function new(); cov1 = new; endfunction
      function run();
        cov1.sample(); // explicity sample at the proper time.
      endfunction
    endclass
  }}}
* the default `%t` use the smallest precision of timescale in the session, we must use `$timeformat` to set it explicitly to avoid
  confusing.
  {{{systemverilog
    $timeformat(-9, 5, " ns", 10);
  }}}
* class variable access control: `local` limits the variable access from current class, `protected` = `local` + access from subclass.
* the force statement right hand must be static value(or constant), can't be automatic values.
  
 = Verification =
 
* Functional coverage information is only valid for a successful simulation.Some verification teams periodically measure all
  functional coverage from scratch so that it reflects the current state of the design.
* If the coverage level has plateaued,with no recent progress,it is time to modify the constraints. Only if you think that
  reaching the last few test cases for one particular section may take too long for constrained-random simulation should you
  consider writing a directed test.
* keep track bug rate through project life. when sags,find different way to create corner cases.
* anticipate what are the key design features, corner cases, and possible failure modes for verification planning.
* coverage: only measure data what you are going to use.
* coverage: gathering information rather than data.
 = 延迟 =
* 传输延迟一般为输入信号变化到对应输出信号变化经过的时间，不会对输入信号进行滤除处理，所以传输延迟是一种绝对延迟，这种延迟类似于物理传输线的延迟，在仿真中用于模拟连线延迟。如下图所示，输入一般不会被滤除
* 惯性延迟().
